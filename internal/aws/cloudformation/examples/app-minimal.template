{
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "PV64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "m1.small": {
        "Arch": "PV64"
      },
      "m1.medium": {
        "Arch": "PV64"
      },
      "m1.large": {
        "Arch": "PV64"
      },
      "m1.xlarge": {
        "Arch": "PV64"
      },
      "m2.xlarge": {
        "Arch": "PV64"
      },
      "m2.2xlarge": {
        "Arch": "PV64"
      },
      "m2.4xlarge": {
        "Arch": "PV64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "c1.medium": {
        "Arch": "PV64"
      },
      "c1.xlarge": {
        "Arch": "PV64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "HVM64": "ami-05783d60"
      }
    }
  },
  "Resources": {
    "ServerLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 30
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "60",
          "Target": "HTTP:80/",
          "Timeout": "5",
          "UnhealthyThreshold": "2"
        },
        "Listeners": [
          {
            "InstancePort": "8000",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "443",
            "Protocol": "SSL",
            "SSLCertificateId": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:iam::",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":server-certificate/",
                  {
                    "Ref": "DnsName"
                  }
                ]
              ]
            }
          }
        ],
        "Policies": [
          {
            "PolicyName": "EnableProxyProtocol",
            "PolicyType": "ProxyProtocolPolicyType",
            "Attributes": [
              {
                "Name": "ProxyProtocol",
                "Value": true
              }
            ],
            "InstancePorts": [
              "8000"
            ]
          }
        ],
        "Subnets": [
          {
            "Ref": "VpcSubnetA"
          },
          {
            "Ref": "VpcSubnetB"
          },
          {
            "Ref": "VpcSubnetC"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ]
      }
    },
    "LoadBalancerRecordSet": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "Comment": "Zone apex alias targetd to the load balancer",
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DnsHostedZoneName"
              },
              "."
            ]
          ]
        },
        "RecordSets": [
          {
            "Name": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "DnsName"
                  },
                  "."
                ]
              ]
            },
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "ServerLoadBalancer",
                  "CanonicalHostedZoneNameID"
                ]
              },
              "DNSName": {
                "Fn::GetAtt": [
                  "ServerLoadBalancer",
                  "CanonicalHostedZoneName"
                ]
              }
            }
          }
        ]
      }
    },
    "ServerInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ServerInstancePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Statement1",
                  "Action": [
                    "s3:*"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "DataBucket"
                        },
                        "*"
                      ]
                    ]
                  }
                },
                {
                  "Sid": "Statement3",
                  "Action": [
                    "ec2:DescribeInstances",
                    "autoscaling:DescribeAutoScalingGroups"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Sid": "Statement6",
                  "Action": [
                    "s3:Get*"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "DeployBucket"
                        },
                        "*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "ServerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ServerInstanceRole"
          }
        ]
      }
    },
    "ServerAutoscale": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::Select": [
              "1",
              {
                "Fn::GetAZs": {
                  "Ref": "AWS::Region"
                }
              }
            ]
          },
          {
            "Fn::Select": [
              "2",
              {
                "Fn::GetAZs": {
                  "Ref": "AWS::Region"
                }
              }
            ]
          },
          {
            "Fn::Select": [
              "3",
              {
                "Fn::GetAZs": {
                  "Ref": "AWS::Region"
                }
              }
            ]
          }
        ],
        "Cooldown": "300",
        "DesiredCapacity": {
          "Ref": "ServerScale"
        },
        "MaxSize": {
          "Ref": "ServerScale"
        },
        "MinSize": {
          "Ref": "ServerScale"
        },
        "HealthCheckGracePeriod": 300,
        "HealthCheckType": "EC2",
        "VPCZoneIdentifier": [
          {
            "Ref": "VpcSubnetA"
          },
          {
            "Ref": "VpcSubnetB"
          },
          {
            "Ref": "VpcSubnetC"
          }
        ],
        "LoadBalancerNames": [
          {
            "Ref": "ServerLoadBalancer"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "ServerLaunchConfiguration"
        },
        "Tags": [
          {
            "PropagateAtLaunch": true,
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "DnsName"
                  },
                  "server"
                ]
              ]
            }
          },
          {
            "PropagateAtLaunch": true,
            "Key": "application",
            "Value": "example"
          },
          {
            "PropagateAtLaunch": true,
            "Key": "cluster",
            "Value": {
              "Ref": "DnsName"
            }
          }
        ]
      }
    },
    "ServerLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": "VpcInternetGatewayAttachment",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "ServerInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyPair"
        },
        "SecurityGroups": [
          {
            "Ref": "ServersSecurityGroup"
          }
        ],
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdb",
            "VirtualName": "ephemeral0"
          },
          {
            "DeviceName": "/dev/sdc",
            "VirtualName": "ephemeral1"
          }
        ],
        "UserData": "xx"
      }
    },
    "ServersSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            "-",
            [
              "servers",
              {
                "Ref": "DnsName"
              }
            ]
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "ServersSecurityIngressPublicService": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "ServersSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": 8000,
        "ToPort": 8000,
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "LoadBalancerSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "ServersSecurityIngressInternalService": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "ServersSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": 8001,
        "ToPort": 8001,
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ServersSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "ServersSecurityIngressClusterServiceTCP": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "ServersSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": 8002,
        "ToPort": 8002,
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ServersSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "ServersSecurityIngressClusterServiceUDP": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "ServersSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "udp",
        "FromPort": 8002,
        "ToPort": 8002,
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ServersSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            "-",
            [
              "LoadBalancer",
              {
                "Ref": "DnsName"
              }
            ]
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "DataBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              "data",
              {
                "Ref": "DnsName"
              }
            ]
          ]
        },
        "Tags": [
          {
            "Key": "application",
            "Value": "example"
          }
        ]
      }
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "application",
            "Value": "example"
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "DnsName"
            }
          }
        ]
      }
    },
    "VpcSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/18",
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "application",
            "Value": "example"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "DnsName"
                  },
                  "a"
                ]
              ]
            }
          }
        ]
      }
    },
    "VpcSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.64.0/18",
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "application",
            "Value": "example"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "DnsName"
                  },
                  "b"
                ]
              ]
            }
          }
        ]
      }
    },
    "VpcSubnetC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.128.0/18",
        "AvailabilityZone": {
          "Fn::Select": [
            "3",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "application",
            "Value": "example"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "DnsName"
                  },
                  "c"
                ]
              ]
            }
          }
        ]
      }
    },
    "VpcInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "application",
            "Value": "example"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "DnsName"
                  },
                  "InternetGateway"
                ]
              ]
            }
          }
        ]
      }
    },
    "VpcInternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "VpcInternetGateway"
        }
      }
    },
    "VpcDefaultRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "VpcRouteTable"
        },
        "GatewayId": {
          "Ref": "VpcInternetGateway"
        }
      },
      "DependsOn": "VpcInternetGatewayAttachment"
    },
    "VpcRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "VpcSubnetRouteTableAssociationA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "VpcSubnetA"
        },
        "RouteTableId": {
          "Ref": "VpcRouteTable"
        }
      }
    },
    "VpcSubnetRouteTableAssociationB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "VpcSubnetB"
        },
        "RouteTableId": {
          "Ref": "VpcRouteTable"
        }
      }
    },
    "VpcSubnetRouteTableAssociationC": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "VpcSubnetC"
        },
        "RouteTableId": {
          "Ref": "VpcRouteTable"
        }
      }
    },
    "VpcNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "VpcNetworkAclAllowAllEgress": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": true,
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100,
        "NetworkAclId": {
          "Ref": "VpcNetworkAcl"
        }
      }
    },
    "VpcNetworkAclAllowAllIngress": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol":-1,
        "RuleAction": "allow",
        "RuleNumber": 100,
        "NetworkAclId": {
          "Ref": "VpcNetworkAcl"
        }
      }
    },
    "VpcSubnetAclA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "VpcNetworkAcl"
        },
        "SubnetId": {
          "Ref": "VpcSubnetA"
        }
      }
    },
    "VpcSubnetAclB": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "VpcNetworkAcl"
        },
        "SubnetId": {
          "Ref": "VpcSubnetB"
        }
      }
    },
    "VpcSubnetAclC": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "VpcNetworkAcl"
        },
        "SubnetId": {
          "Ref": "VpcSubnetC"
        }
      }
    },
    "VpcDhcpOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "VpcDhpcOptionsAssociation": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "DhcpOptionsId": {
          "Ref": "VpcDhcpOptions"
        }
      }
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "example production infrastructure",
  "Parameters": {
    "DnsName": {
      "Description": "The top level DNS name for the infrastructure",
      "Type": "String",
      "Default": "preview.example.io"
    },
    "DnsHostedZoneName": {
      "Description": "The name of the DNS zone (TLD)",
      "Type": "String",
      "Default": "example.io"
    },
    "KeyPair": {
      "Description": "The name of the AWS key to use for access to EC2 instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "ross@rm"
    },
    "InstanceType": {
      "Description": "The instance type for the Servers",
      "Type": "String",
      "Default": "t2.micro"
    },
    "ServerScale": {
      "Description": "Number of server instances",
      "Type": "String",
      "Default": "1"
    },
    "DeployBucket": {
      "Description": "The name of the S3 bucket where the app is deployed",
      "Type": "String",
      "Default": "example-deploy"
    }
  }
}
